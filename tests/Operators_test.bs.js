// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var ReMap = require("../src/ReMap.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var currencies = /* array */[
  /* tuple */[
    "USD",
    100
  ],
  /* tuple */[
    "PLN",
    393
  ]
];

var people = /* array */[
  /* tuple */[
    "Bob",
    /* record */[
      /* petsName */"Fluffykins",
      /* age */23
    ]
  ],
  /* tuple */[
    "James",
    /* record */[
      /* petsName */"Bary",
      /* age */26
    ]
  ]
];

Jest.describe("(@:) Accessor", (function (param) {
        Jest.test("Gets a prmitive value", (function (param) {
                return Jest.Expect[/* toEqual */12](100, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](currencies, "USD")));
              }));
        Jest.test("Gets a complex value", (function (param) {
                var match = ReMap.Operators[/* @: */0](people, "Bob");
                if (match !== undefined) {
                  return Jest.Expect[/* toEqual */12]("Fluffykins", Jest.Expect[/* expect */0](match[/* petsName */0]));
                } else {
                  return Jest.Expect[/* toEqual */12](false, Jest.Expect[/* expect */0](true));
                }
              }));
        return Jest.test("Returns `None` when didn't find an entry", (function (param) {
                      return Jest.Expect[/* toEqual */12](undefined, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](people, "Jon")));
                    }));
      }));

Jest.describe("(@!:) Unsafe Accessor", (function (param) {
        Jest.test("Gets a prmitive value", (function (param) {
                return Jest.Expect[/* toEqual */12](100, Jest.Expect[/* expect */0](ReMap.Operators[/* @:! */2](currencies, "USD")));
              }));
        return Jest.test("Gets a complex value", (function (param) {
                      return Jest.Expect[/* toEqual */12]("Fluffykins", Jest.Expect[/* expect */0](ReMap.Operators[/* @:! */2](people, "Bob")[/* petsName */0]));
                    }));
      }));

Jest.describe("(@-) Deleter", (function (param) {
        Jest.test("Deletes a primitive value", (function (param) {
                return Jest.Expect[/* toBe */2](undefined, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](ReMap.Operators[/* @- */3](currencies, "PLN"), "PLN")));
              }));
        return Jest.test("Deletes a colplex value", (function (param) {
                      return Jest.Expect[/* toBe */2](undefined, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](ReMap.Operators[/* @- */3](people, "Bob"), "Bob")));
                    }));
      }));

Jest.describe("(@+ | @++) Appender", (function (param) {
        Jest.test("Adds a primitive", (function (param) {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Belt_Array.some(ReMap.Operators[/* @+ */5](currencies, /* tuple */[
                                        "GBP",
                                        82
                                      ]), (function (param) {
                                      if (param[0] === "GBP") {
                                        return param[1] === 82;
                                      } else {
                                        return false;
                                      }
                                    }))));
              }));
        return Jest.test("Doesn't add a key copy", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  /* tuple */[
                                    "PLN",
                                    393
                                  ],
                                  /* tuple */[
                                    "GBP",
                                    82
                                  ]
                                ], Jest.Expect[/* expect */0](ReMap.Operators[/* @++ */4](/* array */[/* tuple */[
                                            "PLN",
                                            393
                                          ]], /* array */[
                                          /* tuple */[
                                            "PLN",
                                            432
                                          ],
                                          /* tuple */[
                                            "GBP",
                                            82
                                          ]
                                        ])));
                    }));
      }));

Jest.describe("(@#) Editor", (function (param) {
        Jest.test("Edits a primitive", (function (param) {
                return Jest.Expect[/* toEqual */12](401, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](ReMap.Operators[/* @# */6](/* array */[
                                        /* tuple */[
                                          "PLN",
                                          393
                                        ],
                                        /* tuple */[
                                          "USD",
                                          100
                                        ]
                                      ], /* tuple */[
                                        "PLN",
                                        401
                                      ]), "PLN")));
              }));
        return Jest.test("Edits a complex value", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  /* tuple */[
                                    "Fluffykins",
                                    23
                                  ],
                                  /* tuple */[
                                    "Bobby",
                                    28
                                  ]
                                ], Jest.Expect[/* expect */0](ReMap.Operators[/* @>>= */8](ReMap.Operators[/* @# */6](people, /* tuple */[
                                              "James",
                                              /* record */[
                                                /* petsName */"Bobby",
                                                /* age */28
                                              ]
                                            ]), (function (param, p) {
                                            return /* tuple */[
                                                    p[/* petsName */0],
                                                    p[/* age */1]
                                                  ];
                                          }))));
                    }));
      }));

Jest.describe("(@#>) Editor Function", (function (param) {
        Jest.test("Edits a primitive", (function (param) {
                return Jest.Expect[/* toEqual */12](786, Jest.Expect[/* expect */0](ReMap.Operators[/* @: */0](ReMap.Operators[/* @#> */7](/* array */[
                                        /* tuple */[
                                          "PLN",
                                          393
                                        ],
                                        /* tuple */[
                                          "PLN",
                                          400
                                        ]
                                      ], /* tuple */[
                                        "PLN",
                                        (function (c) {
                                            return (c << 1);
                                          })
                                      ]), "PLN")));
              }));
        return Jest.test("Edits a complex value", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  /* tuple */[
                                    "Fluffykins",
                                    23
                                  ],
                                  /* tuple */[
                                    "Bary",
                                    52
                                  ]
                                ], Jest.Expect[/* expect */0](ReMap.Operators[/* @>>= */8](ReMap.Operators[/* @#> */7](people, /* tuple */[
                                              "James",
                                              (function (p) {
                                                  return /* record */[
                                                          /* petsName */p[/* petsName */0],
                                                          /* age */(p[/* age */1] << 1)
                                                        ];
                                                })
                                            ]), (function (param, p) {
                                            return /* tuple */[
                                                    p[/* petsName */0],
                                                    p[/* age */1]
                                                  ];
                                          }))));
                    }));
      }));

exports.currencies = currencies;
exports.people = people;
/*  Not a pure module */
