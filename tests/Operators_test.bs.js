// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var DerMap = require("../src/DerMap.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var currencies = /* array */[
  /* tuple */[
    "USD",
    100
  ],
  /* tuple */[
    "PLN",
    393
  ]
];

var people = /* array */[
  /* tuple */[
    "Bob",
    /* record */[
      /* petsName */"Fluffykins",
      /* age */23
    ]
  ],
  /* tuple */[
    "James",
    /* record */[
      /* petsName */"Bary",
      /* age */26
    ]
  ],
  /* tuple */[
    "James",
    /* record */[
      /* petsName */"Poppy",
      /* age */27
    ]
  ]
];

Jest.describe("(@:) Accessor", (function (param) {
        Jest.test("Gets a prmitive value", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](DerMap.$at$colon(currencies, "USD")), 100);
              }));
        Jest.test("Gets a complex value", (function (param) {
                var match = DerMap.$at$colon(people, "Bob");
                if (match !== undefined) {
                  return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](match[/* petsName */0]), "Fluffykins");
                } else {
                  return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](true), false);
                }
              }));
        return Jest.test("Returns `None` when didn't find an entry", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](DerMap.$at$colon(people, "Jon")), undefined);
                    }));
      }));

Jest.describe("(@!:) Unsafe Accessor", (function (param) {
        Jest.test("Gets a prmitive value", (function (param) {
                return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](DerMap.$at$bang$colon(currencies, "USD")), 100);
              }));
        return Jest.test("Gets a complex value", (function (param) {
                      return Curry._2(Jest.Expect[/* Operators */25][/* == */0], Jest.Expect[/* expect */0](DerMap.$at$bang$colon(people, "Bob")[/* petsName */0]), "Fluffykins");
                    }));
      }));

Jest.describe("(@-) Deleter", (function (param) {
        Jest.test("Deletes a primitive value", (function (param) {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Belt_Array.every(DerMap.$at$neg(currencies, "PLN"), (function (param) {
                                      return param[0] !== "PLN";
                                    }))));
              }));
        Jest.test("Deletes a colplex value", (function (param) {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Belt_Array.every(DerMap.$at$neg(people, "Bob"), (function (param) {
                                      return param[0] !== "Bob";
                                    }))));
              }));
        return Jest.test("Deletes single entry", (function (param) {
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Belt_Array.every(DerMap.$at$neg(people, "James"), (function (param) {
                                            return !(param[0] === "James" && param[1][/* petsName */0] === "Bary");
                                          }))));
                    }));
      }));

Jest.describe("(@+ | @++) Appender", (function (param) {
        Jest.test("Adds a primitive", (function (param) {
                return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](Belt_Array.some(DerMap.$at$plus(currencies, /* tuple */[
                                        "GBP",
                                        82
                                      ]), (function (param) {
                                      if (param[0] === "GBP") {
                                        return param[1] === 82;
                                      } else {
                                        return false;
                                      }
                                    }))));
              }));
        return Jest.test("Doesn't add a key copy", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  /* tuple */[
                                    "PLN",
                                    393
                                  ],
                                  /* tuple */[
                                    "GBP",
                                    82
                                  ]
                                ], Jest.Expect[/* expect */0](DerMap.$at$plus$plus(/* array */[/* tuple */[
                                            "PLN",
                                            393
                                          ]], /* array */[
                                          /* tuple */[
                                            "PLN",
                                            432
                                          ],
                                          /* tuple */[
                                            "GBP",
                                            82
                                          ]
                                        ])));
                    }));
      }));

exports.currencies = currencies;
exports.people = people;
/*  Not a pure module */
